<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Build an Amazon Machine Image (AMI) using a set of Packer templates.&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>Ubuntu</name>
          <description>Which Ubuntu flavour to build? Possible choices are:

- Trusty (14.04)
- Precise (12.04)

Note: Ubuntu Trusty would be the preferred choice.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Trusty</string>
              <string>Precise</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Platform</name>
          <description>The target platform for which to build? Possible choices are:

- x86_64 (amd64) for 64bit platform
- x86 (i386) for 32bit platform

Note: Docker is currently NOT supported on 32 bit platforms.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>x86_64</string>
              <string>i386</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Build</name>
          <description>What type of Amazon Machine Image (AMI) to build? Possible choices are:

- Base (a minimal build)
- Salt (includes the desired version of Salt)
- Docker (includes latest version of Docker)
- Docker+Salt (includes the desired version of Salt and latest version of Docker)</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Base</string>
              <string>Salt</string>
              <string>Docker</string>
              <string>Docker+Salt</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>Type</name>
          <description>What type of the Amazon Machine Image (AMI) to build? Possible choices are:

- Elastic Block Store (EBS) backed image
- Instance Store (with dedicated root partition)

Note: Both image types may require different type of Elastic Compute Cloud (EC2) instance to be launched.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Elastic Block Store (EBS)</string>
              <string>Instance Store</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>Public</name>
          <description>Should resulting Amazon Machine Image (AMI) be publicly available?

Note: Making image publicly available makes it possible to use by different Amazon Web Services (AWS) accounts.</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SourceAmi</name>
          <description>What base Amazon Machine Image (AMI) use to build the resulting image.

WARNING: Make sure to always chose Hardware Virtual Machine (HVM) image over Paravirtualized (PV) image as a source!

A list of daily Ubuntu images built by Canonical can be found here:

- http://cloud-images.ubuntu.com/precise/current/ (Ubuntu Precise - 12.04)
- http://cloud-images.ubuntu.com/trusty/current/ (Ubuntu Trusty - 14.04)

Both of the above web sites list type of images as follows:

- &quot;hvm&quot; is an &quot;EBS&quot;-based image
- &quot;hvm-instance&quot; is an &quot;Instance Store&quot;-based image</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Account</name>
          <description>Amazon Web Services (AWS) account identifier (ID).</description>
          <defaultValue>649098267436</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>AwsAccessKey</name>
          <description>Amazon Web Services (AWS) user access key.</description>
          <defaultValue>AKIAJ3SDJHWWMAQDCN6A</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>AwsSecretAccessKey</name>
          <description>Amazon Web Services (AWS) user secret access key.</description>
          <defaultValue>zOBobGErb2IXP4QL/znc+/9M4ye4klpXK3Ovi55U</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.FileParameterDefinition>
          <name>Certificate</name>
          <description>Public X.509 certificate to be used for signing an instance store backed Amazon Machine Image (AMI).

Note: This only applicable (and also a requirement) to instance store backed images.</description>
        </hudson.model.FileParameterDefinition>
        <hudson.model.FileParameterDefinition>
          <name>CertificatePrivateKey</name>
          <description>A private key to be used for signing an instance store backed Amazon Machine Image (AMI).

Note: This only applicable (and also a requirement) to instance store backed images.</description>
        </hudson.model.FileParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Bucket</name>
          <description>Name of the S3 bucket where the resulting Amazon Machine Image (AMI) is going to be uploaded to.

Note: This only applicable (and also a requirement) to instance store backed images.</description>
          <defaultValue>opg-ops-images/ec2</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Region</name>
          <description>Region where the Amazon Web Services (AWS) user and the S3 bucket were created, and where the Amazon Machine Image (AMI) is going to be created.

Note: Amazon Machine Image (AMI) created in one region is not going to be available in another.</description>
          <defaultValue>eu-west-1</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VPC</name>
          <description>Virtual Private Cloud (VPC) identifier (ID) to be used when building the Amazon Machine Image (AMI) image.</description>
          <defaultValue>vpc-b0b713d5</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Subnet</name>
          <description>A network subnet identifier (ID) of a desired subnet that exists inside the Virtual Private Cloud (VPC).</description>
          <defaultValue>subnet-2a3bab4f</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>AwsCli</name>
          <description>Which version of AWS command line tools (CLI) to install?</description>
          <defaultValue>1.7.23</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Docker</name>
          <description>Which version of Docker to install?

Note: This is only applicable to builds intending to install Docker.</description>
          <defaultValue>1.6.0</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DockerCompose</name>
          <description>Which version of Docker Compose to install?

Note: This is only applicable to builds intending to install Docker.</description>
          <defaultValue>1.2.0</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>Salt</name>
          <description>Which version of Salt to install (this includes both Salt Master and Minion)?

Note: This is only applicable to builds intending to install Salt.</description>
          <defaultValue>2014.7.5</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>SaltServices</name>
          <description>What SaltStack services should be allowed to start automatically on system startup? Possible choices are:

- Minion (only Salt Minion will start automatically, and Master will be disabled)
- Master (only Salt Master will start automatically, and Minion will be disabled)
- Minion+Master (both Salt services will start automatically)</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Minion</string>
              <string>Master</string>
              <string>Minion+Master</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.copyartifact.CopyArtifactPermissionProperty plugin="copyartifact@1.34">
      <projectNameList/>
    </hudson.plugins.copyartifact.CopyArtifactPermissionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.22">
      <autoRebuild>false</autoRebuild>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="org.jenkinsci.plugins.multiplescms.MultiSCM" plugin="multiple-scms@0.3">
    <scms>
      <hudson.plugins.git.GitSCM plugin="git@2.3.4">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>git@github.com:ministryofjustice/opg-os-images.git</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches>
          <hudson.plugins.git.BranchSpec>
            <name>*/master</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="list"/>
        <extensions/>
      </hudson.plugins.git.GitSCM>
    </scms>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash -eu

export PATH=${PATH}:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

_string_to_lower() {
    echo &quot;$*&quot; | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;
}

_sanitize_platform() {
    case &quot;$1&quot; in
        x86|i?86)
            echo &apos;i386&apos;
        ;;
        x86_64|amd64)
            echo &apos;amd64&apos;
        ;;
    esac
}

_sanitize_ubuntu() {
    case $(_string_to_lower &quot;$1&quot;) in
        precise)
            echo &apos;12.04&apos;
        ;;
        trusty)
            echo &apos;14.04&apos;
        ;;
    esac
}

_sanitize_build() {
    case $(_string_to_lower &quot;$1&quot;) in
        salt)
            echo &apos;salt&apos;
        ;;
        docker)
            echo &apos;docker&apos;
        ;;
        docker\+salt)
            echo &apos;docker-salt&apos;
        ;;
    esac
}

_sanitize_salt_services() {
    case $(_string_to_lower &quot;$1&quot;) in
        minion)
            echo &apos;minion&apos;
        ;;
        master)
            echo &apos;master&apos;
        ;;
        minion\+master)
            echo &apos;minion,master&apos;
        ;;
    esac
}

_sanitize_type() {
    case $(_string_to_lower &quot;$1&quot;) in
        elastic\ block\ store*)
            echo &apos;amazon-ebs&apos;
        ;;
        instance\ store)
            echo &apos;amazon-instance&apos;
        ;;
    esac
}

_sanitize_boolean() {
    case $(_string_to_lower &quot;$1&quot;) in
        yes|true|1)
            echo &apos;yes&apos;
        ;;
        no|false|0)
            echo &apos;no&apos;
        ;;
    esac
}

UBUNTU=$(_sanitize_ubuntu &quot;$Ubuntu&quot;)
PLATFORM=$(_sanitize_platform &quot;$Platform&quot;)
BUILD=$(_sanitize_build &quot;$Build&quot;)
TYPE=$(_sanitize_type &quot;$Type&quot;)
PUBLIC=$(_sanitize_boolean &quot;$Public&quot;)
EC2_SOURCE_AMI=$(_string_to_lower &quot;$SourceAmi&quot;)

AWS_ACCOUNT_ID=&quot;$Account&quot;
AWS_ACCESS_KEY_ID=&quot;$AwsAccessKey&quot;
AWS_SECRET_ACCESS_KEY=&quot;$AwsSecretAccessKey&quot;
AWS_DEFAULT_REGION=$(_string_to_lower &quot;$Region&quot;)

EC2_VPC_ID=$(_string_to_lower &quot;$VPC&quot;)
EC2_SUBNET_ID=$(_string_to_lower &quot;$Subnet&quot;)

S3_BUCKET=$(_string_to_lower &quot;$Bucket&quot;)

AWSCLI_VERSION=&quot;$AwsCli&quot;

DOCKER_VERSION=&quot;$Docker&quot;
DOCKER_COMPOSE_VERSION=&quot;$DockerCompose&quot;

SALT_VERSION=&quot;$Salt&quot;
SALT_SERVICES=$(_sanitize_salt_services &quot;$SaltServices&quot;)

export AWS_ACCOUNT_ID AWS_ACCESS_KEY_ID         \
       AWS_SECRET_ACCESS_KEY AWS_DEFAULT_REGION \
       EC2_SOURCE_AMI EC2_VPC_ID EC2_SUBNET_ID  \
       S3_BUCKET AWSCLI_VERSION DOCKER_VERSION  \
       DOCKER_COMPOSE_VERSION SALT_VERSION      \
       SALT_SERVICES BUILD_NUMBER

rm -f ${WORKSPACE}/packer/certificates/*

{
    mv -f ${WORKSPACE}/Certificate \
          ${WORKSPACE}/packer/certificates/cert.pem

    mv -f ${WORKSPACE}/CertificatePrivateKey \
          ${WORKSPACE}/packer/certificates/pk.pem
} &amp;&gt;/dev/null || true

EC2_CERT=&quot;${WORKSPACE}/packer/certificates/cert.pem&quot;
EC2_PRIVATE_KEY=&quot;${WORKSPACE}/packer/certificates/pk.pem&quot;

export EC2_CERT EC2_PRIVATE_KEY

if [[ $TYPE =~ ^amazon-instance$ ]]; then
    for v in EC2_CERT EC2_PRIVATE_KEY; do
        eval VALUE=&apos;$&apos;${v}
        if [[ -z $VALUE ]] || [[ ! -f $VALUE ]]; then
            echo -e &apos;\e[0;31m&apos;
            cat &lt;&lt;&apos;EOS&apos;

    Unable to locate the X.509 certificate (public certificate
    and a private key) needed when building an instance store
    backed Amazon Machine Image (AMI).

EOS
            echo -e &apos;\e[0m&apos;
            exit 1
        fi
    done
fi

TEMPORARY_FILE=$(mktemp -ut &quot;$(basename $0).XXXXXXXX&quot;)

trap &quot;rm -f $TEMPORARY_FILE $EC2_CERT $EC2_PRIVATE_KEY; exit&quot; \
    HUP INT KILL TERM QUIT EXIT

pushd ${WORKSPACE}/packer &amp;&gt;/dev/null

TEMPLATE=&quot;ubuntu-${UBUNTU}-${PLATFORM}.json&quot;
if [[ -n $BUILD ]]; then
    TEMPLATE=&quot;ubuntu-${UBUNTU}-${PLATFORM}-${BUILD}.json&quot;
fi

BUILD_NAME=&quot;${TEMPLATE//.json*}&quot;
BUILD_NAME=&quot;${BUILD_NAME##*/}&quot;

printf &quot;\n*** VALIDATING: %s\n&quot; &quot;$BUILD_NAME&quot;
packer validate -only=${TYPE} $TEMPLATE

printf &quot;\n*** BUILDING: %s\n&quot; &quot;$BUILD_NAME&quot;
(packer build -only=${TYPE} $TEMPLATE) | tee $TEMPORARY_FILE
EXIT_CODE=${PIPESTATUS[0]}

[[ $EXIT_CODE == 0 ]] || exit $EXIT_CODE

if [[ $PUBLIC == &apos;yes&apos; ]]; then
    AMI_ID=$(grep -o &quot;${AWS_DEFAULT_REGION}:\s\+.*&quot; $TEMPORARY_FILE | \
             awk &apos;{ print $2 }&apos; 2&gt;/dev/null)

    printf &quot;\n*** SETTING PERMISSION: %s (%s)\n&quot; &quot;$BUILD_NAME&quot; &quot;$AMI_ID&quot;
    aws ec2 modify-image-attribute \
        --image-id $AMI_ID \
        --launch-permission &apos;{ &quot;Add&quot;: [ { &quot;Group&quot;: &quot;all&quot; } ] }&apos; \
        --region $AWS_DEFAULT_REGION
fi

popd &amp;&gt;/dev/null

trap - HUP INT KILL TERM QUIT EXIT

rm -f $EC2_CERT \
      $EC2_PRIVATE_KEY</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.5.15"/>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.4.1">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
</project>
